name: Merge

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20]
    steps:
      - uses: actions/checkout@v4

      # Install pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Get pnpm cache directory path
      - name: Get pnpm cache directory path
        id: pnpm-cache-dir-path
        run: echo "::set-output name=dir::$(pnpm store path)"

      - name: Cache pnpm store
        uses: actions/cache@v3
        id: pnpm-cache
        with:
          path: ${{ steps.pnpm-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store

      - name: Install dependencies
        run: pnpm install

      - name: Verify installation
        run: pnpm list

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    needs: build
    steps:
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Get pnpm cache directory path
      - name: Get pnpm cache directory path
        id: pnpm-cache-dir-path
        run: echo "::set-output name=dir::$(pnpm store path)"

      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store
      - name: Verify dependencies
        run: pnpm install --offline

      - name: Run linter
        run: pnpm lint

  types:
    name: Check Types
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    needs: build
    steps:
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Get pnpm cache directory path
      - name: Get pnpm cache directory path
        id: pnpm-cache-dir-path
        run: echo "::set-output name=dir::$(pnpm store path)"

      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store
      - name: verify dependencies
        run: pnpm install --offline

      - name: Run type checks
        run: pnpm types

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    needs: build
    steps:
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Get pnpm cache directory path
      - name: Get pnpm cache directory path
        id: pnpm-cache-dir-path
        run: echo "::set-output name=dir::$(pnpm store path)"

      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store
      - name: verify dependencies
        run: pnpm install --offline

      - name: Run unit tests
        run: pnpm test
